#!/usr/bin/env bash

set -eu

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

# for jq
PATH=/usr/local/bin:$PATH

payload=$(mktemp /tmp/resource-in.XXXXXX)

cat > "${payload}" <&0

webhook_url="$(jq -r '.source.url' < "${payload}")"
build_status="$(jq -r '(.params.status // null)' < "${payload}")"
proxy="$(jq -r '(.params.proxy // null)' < "${payload}")"
region=$(echo "${ATC_EXTERNAL_URL}" | cut -d'.' -f2)
concourse_hostname=$(echo "${ATC_EXTERNAL_URL}" | cut -d'.' -f1 | sed -e 's/https:\/\///g')
custom_message="$(jq -r '.params.message' < "${payload}")"
message_file="$(jq -r '.params.message_file' < "${payload}")"

if [ "${webhook_url}" == "" ]; then
  echo "No webhook_url has been set. Exiting.."
  exit 1
fi

if [[ "${proxy}" == "false" ]]; then
  unset http_proxy https_proxy HTTP_PROXY HTTPS_PROXY
fi

case "$build_status" in
  success)
    message_color='00FF00'
    message_title="Build ${BUILD_PIPELINE_NAME} - ${BUILD_JOB_NAME} succeeded"
    ;;
  failure)
    message_color='FF0000'
    message_title="Build ${BUILD_PIPELINE_NAME} - ${BUILD_JOB_NAME} failed"
    ;;
  *)
    echo "Neither success nor failure was set as the build_status. Exiting.."
    exit 1
    ;;
esac

if [[ "${message_file:-}" != "null" ]]; then
  message_section="$(cat $1/${message_file})"
else
  message_section=$custom_message
fi

# Insert quotes if nessesary
if [[ "${message_section:-}" != "null" ]]; then
  message_section="\"${message_section}\""
fi

message_summary="${BUILD_PIPELINE_NAME} - ${BUILD_JOB_NAME}"
message_title_link="${ATC_EXTERNAL_URL}/teams/${BUILD_TEAM_NAME}/pipelines/${BUILD_PIPELINE_NAME}/jobs/${BUILD_JOB_NAME}/builds/${BUILD_NAME}"

body="$(cat <<EOF
{
	"@type": "MessageCard",
	"@context": "https://schema.org/extensions",
	"summary": "${message_summary}",
	"themeColor": "${message_color}",
	"title": "${message_title}",
	"potentialAction": [
		{
			"@type": "OpenUri",
			"name": "View in Concourse",
			"targets": [
				{
					"os": "default",
					"uri": "${message_title_link}"
				}
			]
		}
	],
  	"sections": [
      {
        "text": ${message_section}
      }
  	]
}
EOF
)"

compact_body="$(echo "${body}" | jq -c '.')"

curl -f -s -L -X POST \
  "${webhook_url}" \
  -H 'Content-Type: application/json' \
  -H 'cache-control: no-cache' \
  -d "${compact_body}"

# print the output

timestamp="$(jq -n "{version:{time:\"$(date --utc +%FT%T.%3NZ)\"}}")"
echo "$timestamp" | jq -s add >&3
